using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Movement : MonoBehaviour
{
    [SerializeField] float walkSpeed = 8f;
    [SerializeField] float RunSpeed = 14f;
    [SerializeField] float JumpForce = 8f;
    [SerializeField] float Gravity = 15f;

    [SerializeField] float SenstivityX = 2f;
    [SerializeField] float SenstivityY = 2f;

    [SerializeField] float MinLookLimit = -45f;
    [SerializeField] float MaxLookLimit = 45f;
    [SerializeField] Camera PlayerCam;
    CharacterController controller;
    Vector3 moveDirection = Vector3.zero;
    float rotationX;



    void Start()
    {
        controller = GetComponent<CharacterController>();
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;
    }

    // Update is called once per frame
    void Update()
    {
        Vector3 forward = transform.TransformDirection(Vector3.forward);
        Vector3 right = transform.TransformDirection(Vector3.right);

        bool isRunning = Input.GetKey(KeyCode.LeftShift);

        float SpeedZ = (isRunning ? RunSpeed : walkSpeed) * Input.GetAxis("Vertical");
        float SpeedX = (isRunning ? RunSpeed : walkSpeed) * Input.GetAxis("Horizontal");

        float moveDirectionY = moveDirection.y;
        moveDirection = (forward * SpeedZ) + (right * SpeedX);

        if(Input.GetKeyDown(KeyCode.Space) && controller.isGrounded)
        {
            moveDirection.y = JumpForce;
        }
        else
        {
            moveDirection.y = moveDirectionY;
            moveDirection.y -= Gravity * Time.deltaTime;

        }
        controller.Move(moveDirection * Time.deltaTime);

        rotationX += Input.GetAxis("Mouse Y") * SenstivityY;
        rotationX = Mathf.Clamp(rotationX, MinLookLimit, MaxLookLimit);
        PlayerCam.transform.localRotation = Quaternion.Euler(rotationX, 0f, 0f);
        transform.rotation *= Quaternion.Euler(0, Input.GetAxis("Mouse X") * SenstivityX, 0f);
    }
}
